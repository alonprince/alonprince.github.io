{"Asset":[{"_id":"themes/kael/source/css/screen.css","path":"css/screen.css","modified":false},{"_id":"themes/kael/source/css/component.css","path":"css/component.css","modified":false},{"_id":"themes/kael/source/fonts/OpenSans-Bold-webfont.woff","path":"fonts/OpenSans-Bold-webfont.woff","modified":false},{"_id":"themes/kael/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":false},{"_id":"themes/kael/source/fonts/OpenSans-Regular-webfont.woff","path":"fonts/OpenSans-Regular-webfont.woff","modified":false},{"_id":"themes/kael/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":false},{"_id":"themes/kael/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":false},{"_id":"themes/kael/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":false},{"_id":"themes/kael/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":false},{"_id":"themes/kael/source/js/lib.js","path":"js/lib.js","modified":false},{"_id":"themes/kael/source/js/jquery.min.js","path":"js/jquery.min.js","modified":false},{"_id":"themes/kael/source/js/main.js","path":"js/main.js","modified":false}],"Cache":[{"_id":"scaffolds/draft.md","mtime":1411976558000},{"_id":"scaffolds/page.md","mtime":1404891526000},{"_id":"scaffolds/photo.md","mtime":1404891526000},{"_id":"scaffolds/post.md","mtime":1411958518000},{"_id":"source/_posts/Makefile.md","mtime":1412572984000},{"_id":"source/_posts/Extending-Meteor-Accounts.md","mtime":1413267049000},{"_id":"source/_posts/Meteor中settings的设置方法.md","mtime":1412836898000},{"_id":"source/_posts/git命令小记.md","mtime":1412572978000},{"_id":"source/_posts/npm网速慢的解决办法.md","mtime":1411958621000},{"_id":"source/about/index.md","mtime":1411958734000},{"_id":"themes/kael/README.md","mtime":1411957879000},{"_id":"themes/kael/LICENSE","mtime":1411899186000},{"_id":"themes/kael/_config.yml","mtime":1411957864000},{"_id":"themes/kael/layout/archive.ejs","mtime":1411899186000},{"_id":"themes/kael/layout/category.ejs","mtime":1411899186000},{"_id":"themes/kael/layout/index.ejs","mtime":1411899186000},{"_id":"themes/kael/layout/layout.ejs","mtime":1411899186000},{"_id":"themes/kael/layout/post.ejs","mtime":1411899186000},{"_id":"themes/kael/layout/page.ejs","mtime":1411899186000},{"_id":"themes/kael/layout/tag.ejs","mtime":1411899186000},{"_id":"themes/kael/layout/kael/after_all.ejs","mtime":1411899186000},{"_id":"themes/kael/layout/kael/footer.ejs","mtime":1412569711000},{"_id":"themes/kael/layout/kael/head.ejs","mtime":1412571448000},{"_id":"themes/kael/layout/kael/index.ejs","mtime":1411899186000},{"_id":"themes/kael/layout/kael/post.ejs","mtime":1411899186000},{"_id":"themes/kael/source/css/screen.css","mtime":1412573239000},{"_id":"themes/kael/source/css/component.css","mtime":1411899186000},{"_id":"themes/kael/source/fonts/OpenSans-Bold-webfont.woff","mtime":1411899186000},{"_id":"themes/kael/source/fonts/FontAwesome.otf","mtime":1411899186000},{"_id":"themes/kael/source/fonts/OpenSans-Regular-webfont.woff","mtime":1411899186000},{"_id":"themes/kael/source/fonts/fontawesome-webfont.eot","mtime":1411899186000},{"_id":"themes/kael/source/fonts/fontawesome-webfont.svg","mtime":1411899186000},{"_id":"themes/kael/source/fonts/fontawesome-webfont.woff","mtime":1411899186000},{"_id":"themes/kael/source/fonts/fontawesome-webfont.ttf","mtime":1411899186000},{"_id":"themes/kael/source/js/lib.js","mtime":1411899186000},{"_id":"themes/kael/source/js/jquery.min.js","mtime":1411899186000},{"_id":"themes/kael/source/js/main.js","mtime":1412313219000},{"_id":"source/_posts/关于在Meteor中写自定义登录需要注意的地方.md","mtime":1413213673000}],"Category":[{"name":"技术","_id":"tieflqzuoyhialsc","posts":["1nj7nxghssdcc89x","5wwtly89kvp9lhob","pn256fgdzormn1en","od9wzg94o9hjrs10","fixbewedlnscjz5p","sk79vswhdrzg40x3"]}],"Page":[{"title":"个人简介","date":1411919729000,"content":"<p>非著名前端工程师幼年体，亚洲善待前端组织（PETE）QQ群主</p>\n","source":"about/index.md","raw":"title: 个人简介\ndate: 2014-09-28 23:55:29\n---\n\n非著名前端工程师幼年体，亚洲善待前端组织（PETE）QQ群主","updated":1411958734000,"path":"about/index.html","excerpt":"","_id":"0jnp2roe4gpicwrx","comments":true,"layout":"page"}],"Post":[{"title":"Makefile的简单应用","date":1412347958000,"categories":["tieflqzuoyhialsc"],"tags":["09zmdmol6tqr616d","8hc88jk9ve16rm32","tf0ycy7oq83ugglo"],"content":"<h1 id=\"需求分析\">需求分析</h1>\n<p>在编写nodejs的过程中，我们经常会遇到clone一个项目后，先要键入<code>npm install</code>来安装依赖，然后运行<code>gulp</code>(因为我觉得gulp的语法很简单，所以我只会gulp，还没研究过grunt)来生成相关编译后的静态文件，再使用<code>node app</code>来运行项目</p>\n<p>这种情况如果只是一次还好，但由于nodejs在每次项目文件更改过之后，需要中断进程，然后重启进程，这个过程如果循环很多遍，相信很多人都会疯掉，虽然后类似<code>supervisor</code>之类的小工具能解决问题，<code>grunt</code>也有相应的插件能解决这个问题，例如文件改动，页面自动刷新等等，但是我这里提供了一种另外的解决方案</p>\n<h1 id=\"Makefile简介\">Makefile简介</h1>\n<p>第一次看到<code>Makefile</code>是在别人的项目中，发现很好用，主要是能少打好多个字，看了下，发现里面内容也很简单</p>\n<p>下面这个是我写的一个Makefile文件里面的内容</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"operator\"><span class=\"keyword\">install</span> : <span class=\"keyword\">all</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">all</span> :</div><div class=\"line\">\tnpm <span class=\"keyword\">install</span></div><div class=\"line\">\tgulp scripts</div><div class=\"line\">\tnode app</div></pre></td></tr></table></figure>\n\n<p>用法很简单吧，你只需要把你要运行的命令写在all下面就好了</p>\n","source":"_posts/Makefile.md","raw":"title: Makefile的简单应用\ndate: 2014-10-03 22:52:38\ncategories: 技术\ntags: [nodejs, npm, linux]\n---\n\n需求分析\n================\n在编写nodejs的过程中，我们经常会遇到clone一个项目后，先要键入``npm install``来安装依赖，然后运行``gulp``(因为我觉得gulp的语法很简单，所以我只会gulp，还没研究过grunt)来生成相关编译后的静态文件，再使用``node app``来运行项目\n\n这种情况如果只是一次还好，但由于nodejs在每次项目文件更改过之后，需要中断进程，然后重启进程，这个过程如果循环很多遍，相信很多人都会疯掉，虽然后类似``supervisor``之类的小工具能解决问题，``grunt``也有相应的插件能解决这个问题，例如文件改动，页面自动刷新等等，但是我这里提供了一种另外的解决方案\n\nMakefile简介\n================\n\n第一次看到``Makefile``是在别人的项目中，发现很好用，主要是能少打好多个字，看了下，发现里面内容也很简单\n\n下面这个是我写的一个Makefile文件里面的内容\n```\ninstall : all\n\nall :\n\tnpm install\n\tgulp scripts\n\tnode app\n```\n\n用法很简单吧，你只需要把你要运行的命令写在all下面就好了\n","slug":"Makefile","updated":1412572984000,"excerpt":"","_id":"1nj7nxghssdcc89x","comments":true,"layout":"post","photos":[],"link":""},{"title":"扩展Meteor的用户系统","date":1413008069000,"categories":["tieflqzuoyhialsc"],"tags":["xxiklimfsl1ibygm"],"content":"<h1 id=\"简要说明\">简要说明</h1>\n<p>本文是翻译MeteorHacks的一篇关于Meteor中Accounts的文章,原文见<a href=\"https://meteorhacks.com/extending-meteor-accounts.html\" target=\"_blank\" rel=\"external\">这里</a></p>\n<h1 id=\"正文\">正文</h1>\n<p>Meteor有一个非常好的用户认证系统，称之为<a href=\"http://docs.meteor.com/#accounts_api\" target=\"_blank\" rel=\"external\">Accounts</a>。这个认证系统不仅仅为用密码、facebook、twitter和其他平台提供了强大的方法，还因为其与Meteor的核心服务相关联，从而提供高级别的安全。</p>\n<p>好的，但是如果你想添加一个自定义的验证方法呢？Meteor没有给你足够的信息让你这么做。所以我(原作者)开始研究<a href=\"http://goo.gl/PfIvj\" target=\"_blank\" rel=\"external\">Meteor Accounts system</a>的源代码。我发现作者的代码写的十分优雅，同时实现一个自定义的认证方式也非常简单。接下来我们就来说说这个。</p>\n<p>在这个教程里，我将会为我们的Meteor App来创建一个用于管理的自定义认证系统。但这个系统不是一个正式的实现方式，仅仅可以用来演示如何添加自定义认证。</p>\n<h1 id=\"首先，创建一个简单的应用\">首先，创建一个简单的应用</h1>\n<ul>\n<li>用<code>meteor create admin</code>来创建一个Meteor应用</li>\n<li>用<code>meteor add accounts-ui</code>来添加<code>accounts-ui</code>包</li>\n<li>用下面的代码来替换掉<code>admin.html</code>中的代码<br>添加<code>loginButtons</code>来调用<code>accounts-ui</code>包</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">title</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"title\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 第一处 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">template</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"hello\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">h1</span>&gt;</span>Hello World!<span class=\"tag\">&lt;/<span class=\"title\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 第二处 --&gt;</span></div><div class=\"line\">  <span class=\"comment\">&lt;!-- 第三处 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">input</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"button\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"Click\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">template</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>现在，当你启动你的应用的时候，你将会看到如下的信息。（不要在意红色的字）</p>\n<p><strong>译者注：因为hexo的markdown解析问题，所以请用以下的代码分别替换3处注释内容,请手动去掉两个大括号之间的空格</strong></p>\n<ul>\n<li>第一处{ {&gt; hello} }</li>\n<li>第二处{ {greeting} }</li>\n<li>第三处{ {&gt; loginButtons} }<br><img src=\"http://phishingw.qiniudn.com/GNOR8BK.png\" alt=\"初始界面\"></li>\n</ul>\n<h1 id=\"添加登录的处理方式\">添加登录的处理方式</h1>\n<p>现在，我们需要为我们的管理认证系统注册一个登录的方法。下面是一个创建在<code>server/admin.js</code>的服务端函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accounts.registerLoginHandler(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(loginRequest)</span> </span>{</div><div class=\"line\">  <span class=\"comment\">//Meteor中有多个登录模块 </span></div><div class=\"line\">  <span class=\"comment\">//一个登录的请求需要通过所有的这些登录模块来寻找它所需要的模块</span></div><div class=\"line\">  <span class=\"comment\">//所以，在我们这个登录模块中，我们只需要考虑登录的请求中含有admin字段请求</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(!loginRequest.admin) {</div><div class=\"line\">  \t<span class=\"comment\">//如果不含有admin字段，则return出去</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\">  }</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//这里是我们的认证逻辑</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(loginRequest.password != <span class=\"string\">'admin-password'</span>) {</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">  }</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">//如果不存在管理帐号，则创建一个，并获取到userId</span></div><div class=\"line\">  <span class=\"keyword\">var</span> userId = <span class=\"literal\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> user = Meteor.users.findOne({username: <span class=\"string\">'admin'</span>});</div><div class=\"line\">  <span class=\"keyword\">if</span>(!user) {</div><div class=\"line\">    userId = Meteor.users.insert({username: <span class=\"string\">'admin'</span>});</div><div class=\"line\">  } <span class=\"keyword\">else</span> {</div><div class=\"line\">    userId = user._id;</div><div class=\"line\">  }</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//发送登录者的userId</span></div><div class=\"line\">  <span class=\"keyword\">return</span> {</div><div class=\"line\">    id: userId</div><div class=\"line\">  }</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>现在简单的登录函数已经写完了</p>\n<h1 id=\"添加客户端的登录函数\">添加客户端的登录函数</h1>\n<p>新建<code>client/admin.js</code>文件，将以下代码写入其中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.loginAsAdmin = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(password, callback)</span> </span>{</div><div class=\"line\">  <span class=\"comment\">//新建一个带有admin:true的请求，从而让我们的登录模块来处理这个请求</span></div><div class=\"line\">  <span class=\"keyword\">var</span> loginRequest = {admin: <span class=\"literal\">true</span>, password: password};</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//发送登录的请求</span></div><div class=\"line\">  Accounts.callLoginMethod({</div><div class=\"line\">    methodArguments: [loginRequest],</div><div class=\"line\">    userCallback: callback</div><div class=\"line\">  });</div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<p>现在我们就能添加我们的管理员登录系统。在浏览器的console界面中调用<code>loginAsAdmin</code>方法，然后你会看到你已经登录进去了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//在浏览器的console中调用</span></div><div class=\"line\">Meteor.loginAsAdmin(<span class=\"string\">'admin-password'</span>);</div></pre></td></tr></table></figure>\n\n<p><img src=\"http://phishingw.qiniudn.com/jEa7ZJW.png\" alt=\"登录成功\"></p>\n<h1 id=\"刷新浏览器\">刷新浏览器</h1>\n<p>当你刷新你的浏览器的时候，你会发现你并没有继续处于登录状态。那是因为你没有在登录的时候没有添加一个记录token的功能。<br>用以下的代码来更新<code>server/admin.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accounts.registerLoginHandler(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(loginRequest)</span> </span>{</div><div class=\"line\">  <span class=\"keyword\">if</span>(!loginRequest.admin) {</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\">  }</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>(loginRequest.password != <span class=\"string\">'admin-password'</span>) {</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">  }</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">var</span> userId = <span class=\"literal\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> user = Meteor.users.findOne({username: <span class=\"string\">'admin'</span>});</div><div class=\"line\">  <span class=\"keyword\">if</span>(!user) {</div><div class=\"line\">    userId = Meteor.users.insert({username: <span class=\"string\">'admin'</span>});</div><div class=\"line\">  } <span class=\"keyword\">else</span> {</div><div class=\"line\">    userId = user._id;</div><div class=\"line\">  }</div><div class=\"line\">  <span class=\"comment\">//以上代码无变化</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//创建一个token并记录在user中</span></div><div class=\"line\">  <span class=\"keyword\">var</span> stampedToken = Accounts._generateStampedLoginToken();</div><div class=\"line\">  <span class=\"comment\">//在Meteor 0.7.x中就已经添加了对hash算法的支持 </span></div><div class=\"line\">  <span class=\"comment\">//在Meteor 0.7.x之前的版本你就不需要做这样的处理</span></div><div class=\"line\">  <span class=\"keyword\">var</span> hashStampedToken = Accounts._hashStampedToken(stampedToken);</div><div class=\"line\">  </div><div class=\"line\">  Meteor.users.update(userId, </div><div class=\"line\">    {$push: {<span class=\"string\">'services.resume.loginTokens'</span>: hashStampedToken}}</div><div class=\"line\">  );</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//把token和userId一并返回</span></div><div class=\"line\">  <span class=\"keyword\">return</span> {</div><div class=\"line\">    id: userId,</div><div class=\"line\">    token: stampedToken.token</div><div class=\"line\">  }</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>这段代码就能解决刷新后自动退出登录状态的问题了</p>\n<h1 id=\"总结\">总结</h1>\n<p>现在我们来总结一下我们已经做的事情</p>\n<ul>\n<li>我们尝试着为我们的应用做了一个管理登录系统</li>\n<li>为其添加了登录模块</li>\n<li>添加了一个客户端的登录方法</li>\n<li>添加了刷新token</li>\n</ul>\n<p>你可以从Github上来下载<a href=\"https://github.com/arunoda/meteor-custom-authentication-system\" target=\"_blank\" rel=\"external\">源代码</a><br>这样是不是很简单的就能为Meteor应用添加一个新的认证系统货方法了？：）</p>\n","source":"_posts/Extending-Meteor-Accounts.md","raw":"title: 扩展Meteor的用户系统\ndate: 2014-10-11 14:14:29\ncategories: 技术\ntags: Meteor\n---\n\n简要说明\n=======================\n本文是翻译MeteorHacks的一篇关于Meteor中Accounts的文章,原文见[这里](https://meteorhacks.com/extending-meteor-accounts.html)\n\n正文\n======================\nMeteor有一个非常好的用户认证系统，称之为[Accounts](http://docs.meteor.com/#accounts_api)。这个认证系统不仅仅为用密码、facebook、twitter和其他平台提供了强大的方法，还因为其与Meteor的核心服务相关联，从而提供高级别的安全。\n\n好的，但是如果你想添加一个自定义的验证方法呢？Meteor没有给你足够的信息让你这么做。所以我(原作者)开始研究[Meteor Accounts system](http://goo.gl/PfIvj)的源代码。我发现作者的代码写的十分优雅，同时实现一个自定义的认证方式也非常简单。接下来我们就来说说这个。\n\n在这个教程里，我将会为我们的Meteor App来创建一个用于管理的自定义认证系统。但这个系统不是一个正式的实现方式，仅仅可以用来演示如何添加自定义认证。\n\n首先，创建一个简单的应用\n=======================\n* 用`meteor create admin`来创建一个Meteor应用\n* 用`meteor add accounts-ui`来添加`accounts-ui`包\n* 用下面的代码来替换掉`admin.html`中的代码\n添加`loginButtons`来调用`accounts-ui`包\n```html\n<head>\n  <title>admin</title>\n</head>\n<body>\n  <!-- 第一处 -->\n</body>\n<template name=\"hello\">\n  <h1>Hello World!</h1>\n  <!-- 第二处 -->\n  <!-- 第三处 -->\n  <input type=\"button\" value=\"Click\" />\n</template>\n```\n现在，当你启动你的应用的时候，你将会看到如下的信息。（不要在意红色的字）\n\n**译者注：因为hexo的markdown解析问题，所以请用以下的代码分别替换3处注释内容,请手动去掉两个大括号之间的空格**\n* 第一处{ {> hello} }\n* 第二处{ {greeting} }\n* 第三处{ {> loginButtons} }\n![初始界面](http://phishingw.qiniudn.com/GNOR8BK.png)\n\n添加登录的处理方式\n====================\n现在，我们需要为我们的管理认证系统注册一个登录的方法。下面是一个创建在`server/admin.js`的服务端函数。\n```javascript\nAccounts.registerLoginHandler(function(loginRequest) {\n  //Meteor中有多个登录模块 \n  //一个登录的请求需要通过所有的这些登录模块来寻找它所需要的模块\n  //所以，在我们这个登录模块中，我们只需要考虑登录的请求中含有admin字段请求\n  if(!loginRequest.admin) {\n  \t//如果不含有admin字段，则return出去\n    return undefined;\n  }\n\n  //这里是我们的认证逻辑\n  if(loginRequest.password != 'admin-password') {\n    return null;\n  }\n  \n  //如果不存在管理帐号，则创建一个，并获取到userId\n  var userId = null;\n  var user = Meteor.users.findOne({username: 'admin'});\n  if(!user) {\n    userId = Meteor.users.insert({username: 'admin'});\n  } else {\n    userId = user._id;\n  }\n\n  //发送登录者的userId\n  return {\n    id: userId\n  }\n});\n```\n\n现在简单的登录函数已经写完了\n\n添加客户端的登录函数\n=================\n新建`client/admin.js`文件，将以下代码写入其中：\n```javascript\nMeteor.loginAsAdmin = function(password, callback) {\n  //新建一个带有admin:true的请求，从而让我们的登录模块来处理这个请求\n  var loginRequest = {admin: true, password: password};\n\n  //发送登录的请求\n  Accounts.callLoginMethod({\n    methodArguments: [loginRequest],\n    userCallback: callback\n  });\n};\n```\n现在我们就能添加我们的管理员登录系统。在浏览器的console界面中调用`loginAsAdmin`方法，然后你会看到你已经登录进去了\n```javascript\n//在浏览器的console中调用\nMeteor.loginAsAdmin('admin-password');\n```\n![登录成功](http://phishingw.qiniudn.com/jEa7ZJW.png)\n\n刷新浏览器\n================\n当你刷新你的浏览器的时候，你会发现你并没有继续处于登录状态。那是因为你没有在登录的时候没有添加一个记录token的功能。\n用以下的代码来更新`server/admin.js`\n```javascript\nAccounts.registerLoginHandler(function(loginRequest) {\n  if(!loginRequest.admin) {\n    return undefined;\n  }\n\n  if(loginRequest.password != 'admin-password') {\n    return null;\n  }\n  \n  var userId = null;\n  var user = Meteor.users.findOne({username: 'admin'});\n  if(!user) {\n    userId = Meteor.users.insert({username: 'admin'});\n  } else {\n    userId = user._id;\n  }\n  //以上代码无变化\n\n  //创建一个token并记录在user中\n  var stampedToken = Accounts._generateStampedLoginToken();\n  //在Meteor 0.7.x中就已经添加了对hash算法的支持 \n  //在Meteor 0.7.x之前的版本你就不需要做这样的处理\n  var hashStampedToken = Accounts._hashStampedToken(stampedToken);\n  \n  Meteor.users.update(userId, \n    {$push: {'services.resume.loginTokens': hashStampedToken}}\n  );\n\n  //把token和userId一并返回\n  return {\n    id: userId,\n    token: stampedToken.token\n  }\n});\n```\n这段代码就能解决刷新后自动退出登录状态的问题了\n\n总结\n===========================\n现在我们来总结一下我们已经做的事情\n* 我们尝试着为我们的应用做了一个管理登录系统\n* 为其添加了登录模块\n* 添加了一个客户端的登录方法\n* 添加了刷新token\n\n你可以从Github上来下载[源代码](https://github.com/arunoda/meteor-custom-authentication-system)\n这样是不是很简单的就能为Meteor应用添加一个新的认证系统货方法了？：）\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Extending-Meteor-Accounts","updated":1413267049000,"excerpt":"","_id":"5wwtly89kvp9lhob","comments":true,"layout":"post","photos":[],"link":""},{"title":"Meteor中settings的设置方法","date":1412836257000,"categories":["tieflqzuoyhialsc"],"tags":["xxiklimfsl1ibygm"],"content":"<p>在Meteor的实际开发中，可能会针对不同的服务器做相关的设置，但如果每次都是改源代码会显得很麻烦，也容易出错，于是Meteor.settings就横空出世了</p>\n<p>Meteor.settings的设置很简单</p>\n<p>首先在更目录下新建一个<code>settings.json</code>文件</p>\n<p>在文件中写入</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">{</div><div class=\"line\">\t\"<span class=\"attribute\">foo</span>\": <span class=\"value\"><span class=\"string\">\"bar\"</span></span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>然后在命令行中输入<code>meteor --settings settings.json</code>来启动项目，或者通过<code>meteor deploy --settings settings.json</code>来部署项目</p>\n<p>这样在Meteor的server端中键入<code>console.log(Meteor.settings.foo)</code>就会返回’bar’</p>\n<p>需要注意的就是，在<code>settings.json</code>中，一定要用严格的json格式，不能使用单引号，不然会出现<code>parse error reading settings file</code>的错误</p>\n<p>例如我正在写一个关于ldap的配置，具体信息如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">{</div><div class=\"line\">\t\"<span class=\"attribute\">ldap</span>\": <span class=\"value\">{</span></div><div class=\"line\">\t    \"<span class=\"attribute\">url</span>\": <span class=\"value\"><span class=\"string\">\"ldap://my.ldapserver.com\"</span></span>,</div><div class=\"line\">\t    \"<span class=\"attribute\">base</span>\": <span class=\"value\"><span class=\"string\">\"ou=people,dc=mydomain\"</span></span>,</div><div class=\"line\">\t    \"<span class=\"attribute\">timeout</span>\": <span class=\"value\"><span class=\"number\">10000</span></span>,</div><div class=\"line\">\t    \"<span class=\"attribute\">bindDn</span>\": <span class=\"value\"><span class=\"string\">\"cn=admin,dc=mydomain\"</span></span>,</div><div class=\"line\">\t    \"<span class=\"attribute\">bindSecret</span>\": <span class=\"value\"><span class=\"string\">\"thesecret\"</span></span>,</div><div class=\"line\">\t    \"<span class=\"attribute\">filter</span>\": <span class=\"value\"><span class=\"string\">\"(&(uid=%uid)(objectClass=inetOrgPerson))\"</span></span>,</div><div class=\"line\">\t    \"<span class=\"attribute\">scope</span>\": <span class=\"value\"><span class=\"string\">\"one\"</span></span>,</div><div class=\"line\">\t    \"<span class=\"attribute\">nameAttribute</span>\": <span class=\"value\"><span class=\"string\">\"displayName\"</span></span>,</div><div class=\"line\">\t    \"<span class=\"attribute\">mailAttribute</span>\": <span class=\"value\"><span class=\"string\">\"mail\"</span></span>,</div><div class=\"line\">\t    \"<span class=\"attribute\">forceUsername</span>\": <span class=\"value\"><span class=\"literal\">true</span></span>,</div><div class=\"line\">\t    \"<span class=\"attribute\">throwError</span>\": <span class=\"value\"><span class=\"literal\">true</span></span>,</div><div class=\"line\">\t    \"<span class=\"attribute\">supportedServices</span>\": <span class=\"value\">[<span class=\"string\">\"cas\"</span>]</span></div><div class=\"line\">  \t}</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>这样写之后，你用<code>meteor --settings settings.json</code>来运行，打印你的<code>Meteor.settings</code>就能看见相关设置的信息了</p>\n","source":"_posts/Meteor中settings的设置方法.md","raw":"title: Meteor中settings的设置方法\ndate: 2014-10-09 14:30:57\ncategories: 技术\ntags: Meteor\n---\n\n在Meteor的实际开发中，可能会针对不同的服务器做相关的设置，但如果每次都是改源代码会显得很麻烦，也容易出错，于是Meteor.settings就横空出世了\n\nMeteor.settings的设置很简单\n\n首先在更目录下新建一个`settings.json`文件\n\n在文件中写入\n\n```json\n{\n\t\"foo\": \"bar\"\n}\n```\n\n然后在命令行中输入`meteor --settings settings.json`来启动项目，或者通过`meteor deploy --settings settings.json`来部署项目\n\n这样在Meteor的server端中键入`console.log(Meteor.settings.foo)`就会返回'bar'\n\n需要注意的就是，在`settings.json`中，一定要用严格的json格式，不能使用单引号，不然会出现`parse error reading settings file`的错误\n\n例如我正在写一个关于ldap的配置，具体信息如下\n```json\n{\n\t\"ldap\": {\n\t    \"url\": \"ldap://my.ldapserver.com\",\n\t    \"base\": \"ou=people,dc=mydomain\",\n\t    \"timeout\": 10000,\n\t    \"bindDn\": \"cn=admin,dc=mydomain\",\n\t    \"bindSecret\": \"thesecret\",\n\t    \"filter\": \"(&(uid=%uid)(objectClass=inetOrgPerson))\",\n\t    \"scope\": \"one\",\n\t    \"nameAttribute\": \"displayName\",\n\t    \"mailAttribute\": \"mail\",\n\t    \"forceUsername\": true,\n\t    \"throwError\": true,\n\t    \"supportedServices\": [\"cas\"]\n  \t}\n}\n```\n\n这样写之后，你用`meteor --settings settings.json`来运行，打印你的`Meteor.settings`就能看见相关设置的信息了\n\n","slug":"Meteor中settings的设置方法","updated":1412836898000,"excerpt":"","_id":"pn256fgdzormn1en","comments":true,"layout":"post","photos":[],"link":""},{"title":"git命令小记","date":1412310505000,"categories":["tieflqzuoyhialsc"],"tags":["v3jpbh0hucig8ljs"],"content":"<h3 id=\"简要说明\">简要说明</h3>\n<p>刚刚接触git，一直都不会用git，因为之前用的都是svn，目前正在学习nodejs，所以想把写的练习同步到github上，就查了下用法</p>\n<h3 id=\"初始化\">初始化</h3>\n<p>git的初始化是</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ </span>git init</div></pre></td></tr></table></figure>\n\n<p>这样系统就在当前目录生成了一个<code>.git</code>目录</p>\n<p>首次使用<code>git</code>你可能还需要配置一下<code>git</code></p>\n<p>你可以使用以下命令来配置你<code>git</code>的常用昵称和邮箱</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global <span class=\"literal\">user</span>.name <span class=\"string\">\"Phishing\"</span></div><div class=\"line\">$ git config --global <span class=\"literal\">user</span>.email <span class=\"string\">\"yourname@xxx.com\"</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"添加文件\">添加文件</h3>\n<p>初始化以后，就需要开始添加你想要添加的文件进入git仓库了</p>\n<p>你可以使用<code>git add</code>这个命令来添加<br>例如</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">add</span> *.js</div><div class=\"line\">$ git <span class=\"built_in\">add</span> *.html</div><div class=\"line\">$ git <span class=\"built_in\">add</span> package.json</div><div class=\"line\">$ git <span class=\"built_in\">add</span> README.md</div></pre></td></tr></table></figure>\n\n<p>这样你就把以上文件加入到了git监控的目录里面了</p>\n<p>当然在实际工作中，有些文件是不需要提交到git的</p>\n<p>你可以在当前目录中新建一个<code>.gitignore</code>文件</p>\n<p>在里面添加你不需要监控的文件</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">node_modules/           <span class=\"comment\">//node的包，不需要传上去，文件夹后面加一个/，代表该文件夹被忽略</span></div><div class=\"line\">/test\t\t\t\t\t<span class=\"comment\">//代表根目录下的test文件被忽略</span></div><div class=\"line\">.DS_store \t\t\t\t<span class=\"comment\">//代表.DS_store被忽略</span></div></pre></td></tr></table></figure>\n\n<p>查看当前git的状态可以使用<code>git status</code></p>\n<p>如果你没有添加上面的.gitignore的话，输入<code>git status</code>，git就会用红色高亮告诉你这几个文件是没有被加入git的监控中的，如果需要就使用<code>git add &lt;filename&gt;</code>来添加<br>加了.gitignore后，就不会再提示</p>\n<h3 id=\"提交代码\">提交代码</h3>\n<p>文件添加成功后，就可以开始提交代码了</p>\n<p>可以使用<code>git commit</code>来提交代码到git仓库中</p>\n<p>如果之间键入<code>git commit</code>会提示你没有添加提交massage，你可以在弹出的文件中键入提交信息，然后退出编辑器，即自动提交</p>\n<p>当然这样可能会有点麻烦，所以你可以利用<code>git commit -m &#39;your massage&#39;</code>来在命令行中直接写入提交的信息</p>\n<p>输入完后，git就会告诉你你当前git仓库里面的状态了</p>\n<p>刚刚开始接触git的时候，我每改动一个文件，然后用<code>git status</code>来查看过后发现，我需要再键入一遍<code>git add &lt;filename&gt;</code>才能提交，这让我感觉非常麻烦</p>\n<p>后来我终于知道有个快捷方式了，就是<code>git commit -a -m &#39;your massage&#39;</code>，这样就能跳过<code>git add</code>这个步骤了，当然这样有好有坏，我就不细说了</p>\n<h3 id=\"提交代码到远程仓库\">提交代码到远程仓库</h3>\n<p>提交代码到远程仓库时，你首先得新建一个<code>ssh key</code>，<a href=\"https://help.github.com/articles/generating-ssh-keys/\" target=\"_blank\" rel=\"external\">具体方法在这里</a></p>\n<p>弄好ssh key之后，就可以使用</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ </span>git remote origin <span class=\"symbol\">git:</span>/<span class=\"regexp\">/your_github_address/your</span>_repositores_name.git</div></pre></td></tr></table></figure>\n\n<p>来定义远程仓库的地址了</p>\n<p>定义好之后就能使用</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ </span>git push</div></pre></td></tr></table></figure>\n\n<p>来提交代码到远程仓库了</p>\n<p>如果你是第一次提交代码，系统会提示你使用</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"keyword\">push</span> --<span class=\"keyword\">set</span>-upstream origin master</div></pre></td></tr></table></figure>\n\n<p>来提交代码</p>\n<p>以后你就可以修改代码然后使用</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ </span>git commit -a -m <span class=\"string\">'your massage'</span></div><div class=\"line\"><span class=\"variable\">$ </span>git push</div></pre></td></tr></table></figure>\n\n<p>来提交你的代码了：）</p>\n<h3 id=\"最后\">最后</h3>\n<p>以上就是我这刚刚接触git的小白了解到的一些git的基本操作了，如有错误，还请指出</p>\n<p>谢谢观看【捂脸下台</p>\n","source":"_posts/git命令小记.md","raw":"title: git命令小记\ndate: 2014-10-03 12:28:25\ncategories: 技术\ntags: git\n---\n\n###简要说明\n\n刚刚接触git，一直都不会用git，因为之前用的都是svn，目前正在学习nodejs，所以想把写的练习同步到github上，就查了下用法\n\n###初始化\ngit的初始化是\n```\n$ git init\n```\n这样系统就在当前目录生成了一个``.git``目录\n\n首次使用``git``你可能还需要配置一下``git``\n\n你可以使用以下命令来配置你``git``的常用昵称和邮箱\n```\n$ git config --global user.name \"Phishing\"\n$ git config --global user.email \"yourname@xxx.com\"\n```\n\n###添加文件\n\n初始化以后，就需要开始添加你想要添加的文件进入git仓库了\n\n你可以使用``git add``这个命令来添加\n例如\n```\n$ git add *.js\n$ git add *.html\n$ git add package.json\n$ git add README.md\n```\n\n这样你就把以上文件加入到了git监控的目录里面了\n\n当然在实际工作中，有些文件是不需要提交到git的\n\n你可以在当前目录中新建一个``.gitignore``文件\n\n在里面添加你不需要监控的文件\n```\nnode_modules/           //node的包，不需要传上去，文件夹后面加一个/，代表该文件夹被忽略\n/test\t\t\t\t\t//代表根目录下的test文件被忽略\n.DS_store \t\t\t\t//代表.DS_store被忽略\n```\n查看当前git的状态可以使用``git status``\n\n如果你没有添加上面的.gitignore的话，输入``git status``，git就会用红色高亮告诉你这几个文件是没有被加入git的监控中的，如果需要就使用``git add <filename>``来添加\n加了.gitignore后，就不会再提示\n\n###提交代码\n\n文件添加成功后，就可以开始提交代码了\n\n可以使用``git commit``来提交代码到git仓库中\n\n如果之间键入``git commit``会提示你没有添加提交massage，你可以在弹出的文件中键入提交信息，然后退出编辑器，即自动提交\n\n当然这样可能会有点麻烦，所以你可以利用``git commit -m 'your massage'``来在命令行中直接写入提交的信息\n\n输入完后，git就会告诉你你当前git仓库里面的状态了\n\n刚刚开始接触git的时候，我每改动一个文件，然后用``git status``来查看过后发现，我需要再键入一遍``git add <filename>``才能提交，这让我感觉非常麻烦\n\n后来我终于知道有个快捷方式了，就是``git commit -a -m 'your massage'``，这样就能跳过``git add``这个步骤了，当然这样有好有坏，我就不细说了\n\n###提交代码到远程仓库\n\n提交代码到远程仓库时，你首先得新建一个``ssh key``，[具体方法在这里](https://help.github.com/articles/generating-ssh-keys/)\n\n弄好ssh key之后，就可以使用\n\n```\n$ git remote origin git://your_github_address/your_repositores_name.git\n```\n\n来定义远程仓库的地址了\n\n定义好之后就能使用\n```\n$ git push\n```\n来提交代码到远程仓库了\n\n如果你是第一次提交代码，系统会提示你使用\n```\n$ git push --set-upstream origin master\n```\n来提交代码\n\n以后你就可以修改代码然后使用\n```\n$ git commit -a -m 'your massage'\n$ git push\n```\n来提交你的代码了：）\n\n###最后\n\n以上就是我这刚刚接触git的小白了解到的一些git的基本操作了，如有错误，还请指出\n\n谢谢观看【捂脸下台\n\n\n\n\n\n\n","slug":"git命令小记","updated":1412572978000,"excerpt":"","_id":"od9wzg94o9hjrs10","comments":true,"layout":"post","photos":[],"link":""},{"title":"npm网速慢的解决办法","date":1411917751000,"categories":["tieflqzuoyhialsc"],"tags":["8hc88jk9ve16rm32","09zmdmol6tqr616d"],"content":"<p>国内经常会遇到npm特别慢的情况，可以通过下面的方式，更改npm的镜像</p>\n<h3 id=\"通过下面命令设置镜像\">通过下面命令设置镜像</h3>\n<p><code>npm config set registry http://r.cnpmjs.org</code></p>\n<p>国内镜像：</p>\n<blockquote>\n<p><a href=\"http://r.cnpmjs.org\" target=\"_blank\" rel=\"external\">http://r.cnpmjs.org</a><br><a href=\"http://registry.cnpmjs.org\" target=\"_blank\" rel=\"external\">http://registry.cnpmjs.org</a><br><a href=\"http://registry.npm.taobao.org\" target=\"_blank\" rel=\"external\">http://registry.npm.taobao.org</a></p>\n</blockquote>\n<p>官方镜像：</p>\n<blockquote>\n<p><a href=\"https://registry.npmjs.org\" target=\"_blank\" rel=\"external\">https://registry.npmjs.org</a></p>\n</blockquote>\n<h3 id=\"常用的npm的命令\">常用的npm的命令</h3>\n<p><code>npm install -g</code>全局安装包<br><code>npm ls -g</code>   查看全局已安装的包<br><code>npm install &lt;package&gt;@&lt;version&gt;</code>安装指定版本的包</p>\n<h3 id=\"附上常用的库的地址\">附上常用的库的地址</h3>\n<p>JQuery地址</p>\n<blockquote>\n<p><a href=\"http://code.jquery.com/jquery-1.11.0.min.js\" target=\"_blank\" rel=\"external\">http://code.jquery.com/jquery-1.11.0.min.js</a></p>\n</blockquote>\n<p>bootstrapev2地址</p>\n<blockquote>\n<p><a href=\"http://cdn.bootcss.com/twitter-bootstrap/2.3.2/css/bootstrap.min.css\" target=\"_blank\" rel=\"external\">http://cdn.bootcss.com/twitter-bootstrap/2.3.2/css/bootstrap.min.css</a><br><a href=\"http://cdn.bootcss.com/twitter-bootstrap/2.3.2/js/bootstrap.min.js\" target=\"_blank\" rel=\"external\">http://cdn.bootcss.com/twitter-bootstrap/2.3.2/js/bootstrap.min.js</a></p>\n</blockquote>\n","source":"_posts/npm网速慢的解决办法.md","raw":"title: npm网速慢的解决办法\ndate: 2014-09-28 23:22:31\ncategories: 技术\ntags: [npm, nodejs]\n---\n\n国内经常会遇到npm特别慢的情况，可以通过下面的方式，更改npm的镜像\n\n###通过下面命令设置镜像\n``npm config set registry http://r.cnpmjs.org``\n\n国内镜像：\n>http://r.cnpmjs.org\n>http://registry.cnpmjs.org \n>http://registry.npm.taobao.org\n\n官方镜像：\n>https://registry.npmjs.org\n\n###常用的npm的命令\n``npm install -g``全局安装包\n``npm ls -g``   查看全局已安装的包\n``npm install <package>@<version>``安装指定版本的包\n\n\n###附上常用的库的地址\n\nJQuery地址\n>http://code.jquery.com/jquery-1.11.0.min.js\n\nbootstrapev2地址\n>http://cdn.bootcss.com/twitter-bootstrap/2.3.2/css/bootstrap.min.css\n>http://cdn.bootcss.com/twitter-bootstrap/2.3.2/js/bootstrap.min.js\n\n\n","slug":"npm网速慢的解决办法","updated":1411958621000,"excerpt":"","_id":"fixbewedlnscjz5p","comments":true,"layout":"post","photos":[],"link":""},{"title":"关于在Meteor中写自定义登录需要注意的地方","date":1413209946000,"categories":["tieflqzuoyhialsc"],"tags":["xxiklimfsl1ibygm"],"content":"<p>上一篇博文翻译了Meteorhack的一篇关于如何编写自定义登录方式之后，对<code>Meteor</code>的’Accounts’模块有了一定的认识，为在实际工作中提供了理论知识</p>\n<p>通过这几天在编写自定义登录模块的摸爬滚打之后，也逐渐开始遇到了一些问题</p>\n<h1 id=\"问题一———-第三方登录和原有登录系统冲突\">问题一———-第三方登录和原有登录系统冲突</h1>\n<p>我在编写登录模块的时候，由于系统本身已经添加了<code>accounts-password</code>包，在编写我自己的<code>registerLoginHandler</code>之后，会优先去执行<code>accounts-password</code>包里面的函数，导致每次我调用登录模块，换来的都是<code>Match failed</code>的错误</p>\n<p>我通过查看<code>accounts-password</code>包的<a href=\"https://github.com/meteor/meteor/blob/devel/packages%2Faccounts-password%2Fpassword_server.js#L140\" target=\"_blank\" rel=\"external\">源码</a>之后，我发现，<code>accounts-password</code>的登录逻辑里，会判断传入的<code>loginRequest</code>中是否含有<code>password</code>和<code>srp</code>，在0.8.1之前你只能用密码登录，所以提供了一种登录方法，在0.8.1之后，你还可以使用<code>srp</code>来登录，所以<code>Meteor</code>又写了另外一种登录方法</p>\n<p>通过查看发现，是否调用<code>accounts-password</code>的关键在于，你是否传递了<code>password</code>和<code>srp</code>，通过改进后，我把<code>loginRequest</code>传入的key从<code>password</code>更改成了<code>ldap_password</code>，更改之后，就能绕过<code>accounts-password</code>包的登录机制了</p>\n<h1 id=\"问题二————-关于调用Accounts-callLoginMethod方法中的methodName\">问题二————-关于调用Accounts.callLoginMethod方法中的methodName</h1>\n<p>这个问题一直困扰我，我在<code>registerLoginHandler</code>的时候，给我的method声明了名称，但是在实际调用中，我给<code>Accounts.callLoginMethod</code>传递了<code>methodName</code>却提示我<code>method not found</code>的错误，这问题有待解决</p>\n<p>先只写这么多，等我第三方登录模块写完之后，应该会写一个介绍<code>ldapjs</code>的博文</p>\n","source":"_posts/关于在Meteor中写自定义登录需要注意的地方.md","raw":"title: 关于在Meteor中写自定义登录需要注意的地方\ndate: 2014-10-13 22:19:06\ncategories: 技术\ntags: Meteor\n---\n\n上一篇博文翻译了Meteorhack的一篇关于如何编写自定义登录方式之后，对`Meteor`的'Accounts'模块有了一定的认识，为在实际工作中提供了理论知识\n\n通过这几天在编写自定义登录模块的摸爬滚打之后，也逐渐开始遇到了一些问题\n\n问题一-------第三方登录和原有登录系统冲突\n==========================\n我在编写登录模块的时候，由于系统本身已经添加了`accounts-password`包，在编写我自己的`registerLoginHandler`之后，会优先去执行`accounts-password`包里面的函数，导致每次我调用登录模块，换来的都是`Match failed`的错误\n\n我通过查看`accounts-password`包的[源码](https://github.com/meteor/meteor/blob/devel/packages%2Faccounts-password%2Fpassword_server.js#L140)之后，我发现，`accounts-password`的登录逻辑里，会判断传入的`loginRequest`中是否含有`password`和`srp`，在0.8.1之前你只能用密码登录，所以提供了一种登录方法，在0.8.1之后，你还可以使用`srp`来登录，所以`Meteor`又写了另外一种登录方法\n\n通过查看发现，是否调用`accounts-password`的关键在于，你是否传递了`password`和`srp`，通过改进后，我把`loginRequest`传入的key从`password`更改成了`ldap_password`，更改之后，就能绕过`accounts-password`包的登录机制了\n\n问题二---------关于调用Accounts.callLoginMethod方法中的methodName\n=======================\n这个问题一直困扰我，我在`registerLoginHandler`的时候，给我的method声明了名称，但是在实际调用中，我给`Accounts.callLoginMethod`传递了`methodName`却提示我`method not found`的错误，这问题有待解决\n\n\n\n先只写这么多，等我第三方登录模块写完之后，应该会写一个介绍`ldapjs`的博文","slug":"关于在Meteor中写自定义登录需要注意的地方","updated":1413213673000,"excerpt":"","_id":"sk79vswhdrzg40x3","comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"nodejs","_id":"09zmdmol6tqr616d","posts":["1nj7nxghssdcc89x","fixbewedlnscjz5p"]},{"name":"npm","_id":"8hc88jk9ve16rm32","posts":["1nj7nxghssdcc89x","fixbewedlnscjz5p"]},{"name":"linux","_id":"tf0ycy7oq83ugglo","posts":["1nj7nxghssdcc89x"]},{"name":"Meteor","_id":"xxiklimfsl1ibygm","posts":["5wwtly89kvp9lhob","pn256fgdzormn1en","sk79vswhdrzg40x3"]},{"name":"git","_id":"v3jpbh0hucig8ljs","posts":["od9wzg94o9hjrs10"]}]}