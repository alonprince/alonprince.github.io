<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[_Phishing's blog]]></title>
  <subtitle><![CDATA[Phishing's blog]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://alonprince.github.io/"/>
  <updated>2014-10-16T09:23:40.664Z</updated>
  <id>http://alonprince.github.io/</id>
  
  <author>
    <name><![CDATA[Phishing]]></name>
    <email><![CDATA[alonprince@163.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[简单解析formidable's API]]></title>
    <link href="http://alonprince.github.io/2014/10/16/%E7%AE%80%E5%8D%95%E8%A7%A3%E6%9E%90formidable-s-API/"/>
    <id>http://alonprince.github.io/2014/10/16/简单解析formidable-s-API/</id>
    <published>2014-10-16T04:01:05.000Z</published>
    <updated>2014-10-16T09:23:27.000Z</updated>
    <content type="html"><![CDATA[<h1 id="简介">简介</h1>
<p>本文翻译自<code>github</code>上的<a href="https://github.com/felixge/node-formidable#events" target="_blank" rel="external">Formidable的官方页面</a></p>
<h1 id="介绍">介绍</h1>
<p>一个用来解析数据，特别是上传数据的nodejs模块</p>
<h1 id="安装">安装</h1>
<p>这是一个底层的包，如果你使用的是一个高级的类似<code>Express</code>的框架，你可以通过阅读<a href="http://stackoverflow.com/questions/11295554/how-to-disable-express-bodyparser-for-file-uploads-node-js" target="_blank" rel="external">这里</a>来了解如何在<code>Express</code>来使用<code>Formidable</code>。</p>
<p>你可以使用<code>npm</code>来安装:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> install formidable<span class="property">@latest</span></div></pre></td></tr></table></figure>

<p>或者手动安装：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git clone gi<span class="variable">t:</span>//github.<span class="keyword">com</span>/felixge/node-formidable.git formidable</div><div class="line"><span class="keyword">vim</span> my.js</div><div class="line"># var formidable = require(<span class="string">'./formidable'</span>);</div></pre></td></tr></table></figure>

<p>注意：Formidable应用了<a href="http://github.com/felixge/node-gently" target="_blank" rel="external">gently</a>来运行单元测试，但是你没必要使用它</p>
<h1 id="例子">例子</h1>
<p>解析一个文件上传</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">var formidable = require(<span class="string">'formidable'</span>),</div><div class="line">    http = require(<span class="string">'http'</span>),</div><div class="line">    util = require(<span class="string">'util'</span>);</div><div class="line"></div><div class="line"><span class="transposed_variable">http.</span>createServer(<span class="function"><span class="keyword">function</span><span class="params">(req, res)</span> {</span></div><div class="line">  <span class="keyword">if</span> (<span class="transposed_variable">req.</span>url == <span class="string">'/upload'</span> && <span class="transposed_variable">req.</span><span class="transposed_variable">method.</span>toLowerCase() == <span class="string">'post'</span>) {</div><div class="line">    <span class="comment">// 解析文件上传</span></div><div class="line">    var form = new <span class="transposed_variable">formidable.</span>IncomingForm();</div><div class="line"></div><div class="line">    <span class="transposed_variable">form.</span>parse(req, <span class="function"><span class="keyword">function</span><span class="params">(err, fields, files)</span> {</span></div><div class="line">      <span class="transposed_variable">res.</span>writeHead(<span class="number">200</span>, {<span class="string">'content-type'</span>: <span class="string">'text/plain'</span>});</div><div class="line">      <span class="transposed_variable">res.</span>write(<span class="string">'received upload:\n\n'</span>);</div><div class="line">      <span class="transposed_variable">res.</span><span class="keyword">end</span>(<span class="transposed_variable">util.</span>inspect({fields: fields, files: files}));</div><div class="line">    });</div><div class="line"></div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="comment">// 展示一个文件上传表单</span></div><div class="line">  <span class="transposed_variable">res.</span>writeHead(<span class="number">200</span>, {<span class="string">'content-type'</span>: <span class="string">'text/html'</span>});</div><div class="line">  <span class="transposed_variable">res.</span><span class="keyword">end</span>(</div><div class="line">    <span class="string">'&lt;form action="</span>/upload<span class="string">" enctype="</span>multipart/form-data<span class="string">" method="</span>post<span class="string">"&gt;'</span>+</div><div class="line">    <span class="string">'&lt;input type="</span>text<span class="string">" name="</span>title<span class="string">"&gt;&lt;br&gt;'</span>+</div><div class="line">    <span class="string">'&lt;input type="</span>file<span class="string">" name="</span>upload<span class="string">" multiple="</span>multiple<span class="string">"&gt;&lt;br&gt;'</span>+</div><div class="line">    <span class="string">'&lt;input type="</span>submit<span class="string">" value="</span>Upload<span class="string">"&gt;'</span>+</div><div class="line">    <span class="string">'&lt;/form&gt;'</span></div><div class="line">  );</div><div class="line">}).listen(<span class="number">8080</span>);</div></pre></td></tr></table></figure>

<h1 id="API">API</h1>
<h3 id="Formidable-IncomingForm">Formidable.IncomingForm</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> form = <span class="keyword">new</span> formidable.IncomingForm()</div></pre></td></tr></table></figure>

<p>新建一个传入表单的对象</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">form.encoding = <span class="string">'utf-8'</span></div></pre></td></tr></table></figure>

<p>设置上传表单域的编码</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">form.uploadDir = <span class="string">'/my/dir'</span></div></pre></td></tr></table></figure>

<p>设置文件上传的目录，稍后你可以使用<code>fs.rename()</code>来更改它。默认值为<code>os.tmpDir()</code>。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">form.<span class="variable">keepExtensions =</span> <span class="constant">false</span></div></pre></td></tr></table></figure>

<p>如果你想上传的文件保留扩展名，把这一项设置为<code>true</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">form</span>.<span class="typedef"><span class="keyword">type</span></span></div></pre></td></tr></table></figure>

<p>根据请求来判断的编码类型</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">form.maxFieldsSize = 2 <span class="keyword">*</span> 1024 <span class="keyword">*</span> 1024</div></pre></td></tr></table></figure>

<p>限制分配给处理域的内存大小，如果分配的值超过这个数值，则<code>error</code>时间将会被触发，默认值为2MB。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">form.maxFields </span>=<span class="string"> 1000</span></div></pre></td></tr></table></figure>

<p>限制域中解码查询语句的个数。默认值为1000</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">form.<span class="variable">hash =</span> <span class="constant">false</span></div></pre></td></tr></table></figure>

<p>如果你想对传入的文件进行校验，请设置该属性为<code>sha1</code>或者<code>md5</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">form.<span class="variable">multiples =</span> <span class="constant">false</span></div></pre></td></tr></table></figure>

<p>开启这个选项后，你就能使用HTML5的多文件上传功能了，调用<code>form.parse</code>时传入的就是一个文件的数组</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">form.bytesReceived</div></pre></td></tr></table></figure>

<p>从表单获取到的字节数</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">form.bytesExpected</div></pre></td></tr></table></figure>

<p>预计还剩的字节数</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">form.parse(request, [<span class="keyword">cb</span>])</div></pre></td></tr></table></figure>

<p>从一个node.js上传请求数据中解析内容。如果有<code>cb</code>传入，所有的文件和请求将会传递到这个callback,例如:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">form.parse(req, <span class="keyword">function</span>(err, fields, files) {</div><div class="line">	// <span class="keyword">...</span></div><div class="line">});</div><div class="line"></div><div class="line">form.onPart(part);</div></pre></td></tr></table></figure>

<p>如果你想直接访问<code>multipart stream</code>，你可以覆盖掉这个方法。但是这么做之后会禁用掉<code>field</code>/<code>file</code>事件处理。</p>
<p>如果你想用Formidable来处理某些文件，你可以这么做：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">form.onPart = <span class="function"><span class="keyword">function</span><span class="params">(part)</span> </span>{</div><div class="line">  <span class="keyword">if</span> (!part.filename) {</div><div class="line">    <span class="comment">// let formidable handle all non-file parts</span></div><div class="line">    form.handlePart(part);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Formidable-File">Formidable.File</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">file</span>.<span class="keyword">size</span> = <span class="number">0</span></div></pre></td></tr></table></figure>

<p>上传文件的大小，单位是bytes，如果文件还在上传中（如在<code>fileBegin</code>事件中）,这个数值将会告诉你有多少字节被写入了硬盘</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">file.<span class="variable">path =</span> <span class="constant">null</span></div></pre></td></tr></table></figure>

<p>当前文件的被写入的路径。如果你不想把你的文件放入设置的公共路径，你可以在<code>fileBegin</code>事件中更改这个值</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">file.<span class="variable">name =</span> <span class="constant">null</span></div></pre></td></tr></table></figure>

<p>根据客户端获取到的文件上传后的名字</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">file</span>.<span class="keyword">type</span> = <span class="keyword">null</span></div></pre></td></tr></table></figure>

<p>根据客户端获取到的文件上传后的<code>mine</code>类型</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">file.<span class="variable">lastModifiedDate =</span> <span class="constant">null</span></div></pre></td></tr></table></figure>

<p>文件最后被更改的时间对象</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">file.<span class="variable">hash =</span> <span class="constant">null</span></div></pre></td></tr></table></figure>

<p>得到经过hash计算后的十六进制值</p>
<h4 id="Formidable-File#toJSON()">Formidable.File#toJSON()</h4>
<p>这个方法返回一个表示文件的JSON数据，可以使用<code>JSON.stringify()</code>来使用它去记录日志或者响应请求</p>
<h1 id="事件">事件</h1>
<h4 id="‘progress’">‘progress’</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">form.<span class="keyword">on</span>(<span class="string">'progress'</span>, <span class="function"><span class="keyword">function</span><span class="params">(bytesReceived, bytesExpected)</span> <span class="comment">{</span></span></div><div class="line">});</div></pre></td></tr></table></figure>

<p>发生在每一个数据传入的块被解析之后，可以用来实现进度条</p>
<h4 id="‘field’">‘field’</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">form.<span class="keyword">on</span>(<span class="string">'field'</span>, <span class="function"><span class="keyword">function</span><span class="params">(name, value)</span> <span class="comment">{</span></span></div><div class="line">});</div></pre></td></tr></table></figure>

<h4 id="‘fileBegin’">‘fileBegin’</h4>
<p>每当一个域或者键值对被接受到的时候</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">form.<span class="keyword">on</span>(<span class="string">'fileBegin'</span>, <span class="function"><span class="keyword">function</span><span class="params">(name, <span class="keyword">file</span>)</span> <span class="comment">{</span></span></div><div class="line">});</div></pre></td></tr></table></figure>

<h4 id="‘file’">‘file’</h4>
<p>当一个新的文件在上传流中被检测到的时候触发。 Use this even if you want to stream the file to somewhere else while buffering the upload on the file system.(没理解T_T)</p>
<p>每当一个文件被接收的时候触发，<code>file</code>是<code>File</code>的实例</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">form.<span class="keyword">on</span>(<span class="string">'file'</span>, <span class="function"><span class="keyword">function</span><span class="params">(name, <span class="keyword">file</span>)</span> <span class="comment">{</span></span></div><div class="line">});</div></pre></td></tr></table></figure>

<h4 id="‘error’">‘error’</h4>
<p>当有表单处理错误的时候触发，请求会自动暂停，如果你需要继续触发<code>data</code>事件，你需要手动调用<code>request.resume()</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">form.<span class="keyword">on</span>(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span><span class="params">(err)</span> <span class="comment">{</span></span></div><div class="line">});</div></pre></td></tr></table></figure>

<h4 id="‘aborted’">‘aborted’</h4>
<p>当用户使请求终止的时候触发，现在这个事件是由<code>socket</code>的<code>close</code>和<code>timeout</code>共同触发的，将来会把<code>timeout</code>给独立出来(这需要更改node的核心)。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">form.<span class="keyword">on</span>(<span class="string">'aborted'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span><span class="comment">{</span></span></div><div class="line">});</div></pre></td></tr></table></figure>

<h4 id="‘end’">‘end’</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">form.<span class="keyword">on</span>(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="comment">{</span></span></div><div class="line">});</div></pre></td></tr></table></figure>

<p>当整个请求被接收完并写入磁盘后触发。这里就是你返回数据的一个好地方。</p>
<h1 id="译者注">译者注</h1>
<p>小白前端一枚，对该模块不了解的情况下翻译，本意是为了辅助自己更好的理解该模块，如有错误，请指出，谢谢。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="简介">简介</h1>
<p>本文翻译自<code>github</code>上的<a href="https://github.com/felixge/node-formidable#events" target="_blank" rel="external">]]>
    </summary>
    
      <category term="nodejs" scheme="http://alonprince.github.io/tags/nodejs/"/>
    
      <category term="技术" scheme="http://alonprince.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于在Meteor中写自定义登录需要注意的地方]]></title>
    <link href="http://alonprince.github.io/2014/10/13/%E5%85%B3%E4%BA%8E%E5%9C%A8Meteor%E4%B8%AD%E5%86%99%E8%87%AA%E5%AE%9A%E4%B9%89%E7%99%BB%E5%BD%95%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/"/>
    <id>http://alonprince.github.io/2014/10/13/关于在Meteor中写自定义登录需要注意的地方/</id>
    <published>2014-10-13T14:19:06.000Z</published>
    <updated>2014-10-13T15:21:13.000Z</updated>
    <content type="html"><![CDATA[<p>上一篇博文翻译了Meteorhack的一篇关于如何编写自定义登录方式之后，对<code>Meteor</code>的’Accounts’模块有了一定的认识，为在实际工作中提供了理论知识</p>
<p>通过这几天在编写自定义登录模块的摸爬滚打之后，也逐渐开始遇到了一些问题</p>
<h1 id="问题一———-第三方登录和原有登录系统冲突">问题一———-第三方登录和原有登录系统冲突</h1>
<p>我在编写登录模块的时候，由于系统本身已经添加了<code>accounts-password</code>包，在编写我自己的<code>registerLoginHandler</code>之后，会优先去执行<code>accounts-password</code>包里面的函数，导致每次我调用登录模块，换来的都是<code>Match failed</code>的错误</p>
<p>我通过查看<code>accounts-password</code>包的<a href="https://github.com/meteor/meteor/blob/devel/packages%2Faccounts-password%2Fpassword_server.js#L140" target="_blank" rel="external">源码</a>之后，我发现，<code>accounts-password</code>的登录逻辑里，会判断传入的<code>loginRequest</code>中是否含有<code>password</code>和<code>srp</code>，在0.8.1之前你只能用密码登录，所以提供了一种登录方法，在0.8.1之后，你还可以使用<code>srp</code>来登录，所以<code>Meteor</code>又写了另外一种登录方法</p>
<p>通过查看发现，是否调用<code>accounts-password</code>的关键在于，你是否传递了<code>password</code>和<code>srp</code>，通过改进后，我把<code>loginRequest</code>传入的key从<code>password</code>更改成了<code>ldap_password</code>，更改之后，就能绕过<code>accounts-password</code>包的登录机制了</p>
<h1 id="问题二————-关于调用Accounts-callLoginMethod方法中的methodName">问题二————-关于调用Accounts.callLoginMethod方法中的methodName</h1>
<p>这个问题一直困扰我，我在<code>registerLoginHandler</code>的时候，给我的method声明了名称，但是在实际调用中，我给<code>Accounts.callLoginMethod</code>传递了<code>methodName</code>却提示我<code>method not found</code>的错误，这问题有待解决</p>
<p>先只写这么多，等我第三方登录模块写完之后，应该会写一个介绍<code>ldapjs</code>的博文</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>上一篇博文翻译了Meteorhack的一篇关于如何编写自定义登录方式之后，对<code>Meteor</code>的’Accounts’模块有了一定的认识，为在实际工作中提供了理论知识</p>
<p>通过这几天在编写自定义登录模块的摸爬滚打之后，也逐渐开始遇到了一些问题</]]>
    </summary>
    
      <category term="Meteor" scheme="http://alonprince.github.io/tags/Meteor/"/>
    
      <category term="技术" scheme="http://alonprince.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[扩展Meteor的用户系统]]></title>
    <link href="http://alonprince.github.io/2014/10/11/Extending-Meteor-Accounts/"/>
    <id>http://alonprince.github.io/2014/10/11/Extending-Meteor-Accounts/</id>
    <published>2014-10-11T06:14:29.000Z</published>
    <updated>2014-10-14T06:58:26.000Z</updated>
    <content type="html"><![CDATA[<h1 id="简要说明">简要说明</h1>
<p>本文是翻译MeteorHacks的一篇关于Meteor中Accounts的文章,原文见<a href="https://meteorhacks.com/extending-meteor-accounts.html" target="_blank" rel="external">这里</a></p>
<h1 id="正文">正文</h1>
<p>Meteor有一个非常好的用户认证系统，称之为<a href="http://docs.meteor.com/#accounts_api" target="_blank" rel="external">Accounts</a>。这个认证系统不仅仅为用密码、facebook、twitter和其他平台提供了强大的方法，还因为其与Meteor的核心服务相关联，从而提供高级别的安全。</p>
<p>好的，但是如果你想添加一个自定义的验证方法呢？Meteor没有给你足够的信息让你这么做。所以我(原作者)开始研究<a href="http://goo.gl/PfIvj" target="_blank" rel="external">Meteor Accounts system</a>的源代码。我发现作者的代码写的十分优雅，同时实现一个自定义的认证方式也非常简单。接下来我们就来说说这个。</p>
<p>在这个教程里，我将会为我们的Meteor App来创建一个用于管理的自定义认证系统。但这个系统不是一个正式的实现方式，仅仅可以用来演示如何添加自定义认证。</p>
<h1 id="首先，创建一个简单的应用">首先，创建一个简单的应用</h1>
<ul>
<li>用<code>meteor create admin</code>来创建一个Meteor应用</li>
<li>用<code>meteor add accounts-ui</code>来添加<code>accounts-ui</code>包</li>
<li>用下面的代码来替换掉<code>admin.html</code>中的代码<br>添加<code>loginButtons</code>来调用<code>accounts-ui</code>包</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>admin<span class="tag">&lt;/<span class="title">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line"></div><div class="line">  {{&gt; hello}}</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">template</span> <span class="attribute">name</span>=<span class="value">"hello"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></div><div class="line"></div><div class="line">  {{greeting}}</div><div class="line"></div><div class="line"></div><div class="line">  {{&gt; loginButtons}}</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">value</span>=<span class="value">"Click"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">template</span>&gt;</span></div></pre></td></tr></table></figure>

<p>现在，当你启动你的应用的时候，你将会看到如下的信息。（不要在意红色的字）<br><img src="http://phishingw.qiniudn.com/GNOR8BK.png" alt="初始界面"></p>
<h1 id="添加登录的处理方式">添加登录的处理方式</h1>
<p>现在，我们需要为我们的管理认证系统注册一个登录的方法。下面是一个创建在<code>server/admin.js</code>的服务端函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">Accounts.registerLoginHandler(<span class="function"><span class="keyword">function</span><span class="params">(loginRequest)</span> </span>{</div><div class="line">  <span class="comment">//Meteor中有多个登录模块 </span></div><div class="line">  <span class="comment">//一个登录的请求需要通过所有的这些登录模块来寻找它所需要的模块</span></div><div class="line">  <span class="comment">//所以，在我们这个登录模块中，我们只需要考虑登录的请求中含有admin字段请求</span></div><div class="line">  <span class="keyword">if</span>(!loginRequest.admin) {</div><div class="line">  	<span class="comment">//如果不含有admin字段，则return出去</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="comment">//这里是我们的认证逻辑</span></div><div class="line">  <span class="keyword">if</span>(loginRequest.password != <span class="string">'admin-password'</span>) {</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">  }</div><div class="line">  </div><div class="line">  <span class="comment">//如果不存在管理帐号，则创建一个，并获取到userId</span></div><div class="line">  <span class="keyword">var</span> userId = <span class="literal">null</span>;</div><div class="line">  <span class="keyword">var</span> user = Meteor.users.findOne({username: <span class="string">'admin'</span>});</div><div class="line">  <span class="keyword">if</span>(!user) {</div><div class="line">    userId = Meteor.users.insert({username: <span class="string">'admin'</span>});</div><div class="line">  } <span class="keyword">else</span> {</div><div class="line">    userId = user._id;</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="comment">//发送登录者的userId</span></div><div class="line">  <span class="keyword">return</span> {</div><div class="line">    id: userId</div><div class="line">  }</div><div class="line">});</div></pre></td></tr></table></figure>

<p>现在简单的登录函数已经写完了</p>
<h1 id="添加客户端的登录函数">添加客户端的登录函数</h1>
<p>新建<code>client/admin.js</code>文件，将以下代码写入其中：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Meteor.loginAsAdmin = <span class="function"><span class="keyword">function</span><span class="params">(password, callback)</span> </span>{</div><div class="line">  <span class="comment">//新建一个带有admin:true的请求，从而让我们的登录模块来处理这个请求</span></div><div class="line">  <span class="keyword">var</span> loginRequest = {admin: <span class="literal">true</span>, password: password};</div><div class="line"></div><div class="line">  <span class="comment">//发送登录的请求</span></div><div class="line">  Accounts.callLoginMethod({</div><div class="line">    methodArguments: [loginRequest],</div><div class="line">    userCallback: callback</div><div class="line">  });</div><div class="line">};</div></pre></td></tr></table></figure>

<p>现在我们就能添加我们的管理员登录系统。在浏览器的console界面中调用<code>loginAsAdmin</code>方法，然后你会看到你已经登录进去了</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在浏览器的console中调用</span></div><div class="line">Meteor.loginAsAdmin(<span class="string">'admin-password'</span>);</div></pre></td></tr></table></figure>

<p><img src="http://phishingw.qiniudn.com/jEa7ZJW.png" alt="登录成功"></p>
<h1 id="刷新浏览器">刷新浏览器</h1>
<p>当你刷新你的浏览器的时候，你会发现你并没有继续处于登录状态。那是因为你没有在登录的时候没有添加一个记录token的功能。<br>用以下的代码来更新<code>server/admin.js</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">Accounts.registerLoginHandler(<span class="function"><span class="keyword">function</span><span class="params">(loginRequest)</span> </span>{</div><div class="line">  <span class="keyword">if</span>(!loginRequest.admin) {</div><div class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(loginRequest.password != <span class="string">'admin-password'</span>) {</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">  }</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> userId = <span class="literal">null</span>;</div><div class="line">  <span class="keyword">var</span> user = Meteor.users.findOne({username: <span class="string">'admin'</span>});</div><div class="line">  <span class="keyword">if</span>(!user) {</div><div class="line">    userId = Meteor.users.insert({username: <span class="string">'admin'</span>});</div><div class="line">  } <span class="keyword">else</span> {</div><div class="line">    userId = user._id;</div><div class="line">  }</div><div class="line">  <span class="comment">//以上代码无变化</span></div><div class="line"></div><div class="line">  <span class="comment">//创建一个token并记录在user中</span></div><div class="line">  <span class="keyword">var</span> stampedToken = Accounts._generateStampedLoginToken();</div><div class="line">  <span class="comment">//在Meteor 0.7.x中就已经添加了对hash算法的支持 </span></div><div class="line">  <span class="comment">//在Meteor 0.7.x之前的版本你就不需要做这样的处理</span></div><div class="line">  <span class="keyword">var</span> hashStampedToken = Accounts._hashStampedToken(stampedToken);</div><div class="line">  </div><div class="line">  Meteor.users.update(userId, </div><div class="line">    {$push: {<span class="string">'services.resume.loginTokens'</span>: hashStampedToken}}</div><div class="line">  );</div><div class="line"></div><div class="line">  <span class="comment">//把token和userId一并返回</span></div><div class="line">  <span class="keyword">return</span> {</div><div class="line">    id: userId,</div><div class="line">    token: stampedToken.token</div><div class="line">  }</div><div class="line">});</div></pre></td></tr></table></figure>

<p>这段代码就能解决刷新后自动退出登录状态的问题了</p>
<h1 id="总结">总结</h1>
<p>现在我们来总结一下我们已经做的事情</p>
<ul>
<li>我们尝试着为我们的应用做了一个管理登录系统</li>
<li>为其添加了登录模块</li>
<li>添加了一个客户端的登录方法</li>
<li>添加了刷新token</li>
</ul>
<p>你可以从Github上来下载<a href="https://github.com/arunoda/meteor-custom-authentication-system" target="_blank" rel="external">源代码</a><br>这样是不是很简单的就能为Meteor应用添加一个新的认证系统货方法了？：）</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="简要说明">简要说明</h1>
<p>本文是翻译MeteorHacks的一篇关于Meteor中Accounts的文章,原文见<a href="https://meteorhacks.com/extending-meteor-accounts.html" targe]]>
    </summary>
    
      <category term="Meteor" scheme="http://alonprince.github.io/tags/Meteor/"/>
    
      <category term="技术" scheme="http://alonprince.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Meteor中settings的设置方法]]></title>
    <link href="http://alonprince.github.io/2014/10/09/Meteor%E4%B8%ADsettings%E7%9A%84%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95/"/>
    <id>http://alonprince.github.io/2014/10/09/Meteor中settings的设置方法/</id>
    <published>2014-10-09T06:30:57.000Z</published>
    <updated>2014-10-09T06:41:38.000Z</updated>
    <content type="html"><![CDATA[<p>在Meteor的实际开发中，可能会针对不同的服务器做相关的设置，但如果每次都是改源代码会显得很麻烦，也容易出错，于是Meteor.settings就横空出世了</p>
<p>Meteor.settings的设置很简单</p>
<p>首先在更目录下新建一个<code>settings.json</code>文件</p>
<p>在文件中写入</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">	"<span class="attribute">foo</span>": <span class="value"><span class="string">"bar"</span></span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>然后在命令行中输入<code>meteor --settings settings.json</code>来启动项目，或者通过<code>meteor deploy --settings settings.json</code>来部署项目</p>
<p>这样在Meteor的server端中键入<code>console.log(Meteor.settings.foo)</code>就会返回’bar’</p>
<p>需要注意的就是，在<code>settings.json</code>中，一定要用严格的json格式，不能使用单引号，不然会出现<code>parse error reading settings file</code>的错误</p>
<p>例如我正在写一个关于ldap的配置，具体信息如下</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">	"<span class="attribute">ldap</span>": <span class="value">{</span></div><div class="line">	    "<span class="attribute">url</span>": <span class="value"><span class="string">"ldap://my.ldapserver.com"</span></span>,</div><div class="line">	    "<span class="attribute">base</span>": <span class="value"><span class="string">"ou=people,dc=mydomain"</span></span>,</div><div class="line">	    "<span class="attribute">timeout</span>": <span class="value"><span class="number">10000</span></span>,</div><div class="line">	    "<span class="attribute">bindDn</span>": <span class="value"><span class="string">"cn=admin,dc=mydomain"</span></span>,</div><div class="line">	    "<span class="attribute">bindSecret</span>": <span class="value"><span class="string">"thesecret"</span></span>,</div><div class="line">	    "<span class="attribute">filter</span>": <span class="value"><span class="string">"(&(uid=%uid)(objectClass=inetOrgPerson))"</span></span>,</div><div class="line">	    "<span class="attribute">scope</span>": <span class="value"><span class="string">"one"</span></span>,</div><div class="line">	    "<span class="attribute">nameAttribute</span>": <span class="value"><span class="string">"displayName"</span></span>,</div><div class="line">	    "<span class="attribute">mailAttribute</span>": <span class="value"><span class="string">"mail"</span></span>,</div><div class="line">	    "<span class="attribute">forceUsername</span>": <span class="value"><span class="literal">true</span></span>,</div><div class="line">	    "<span class="attribute">throwError</span>": <span class="value"><span class="literal">true</span></span>,</div><div class="line">	    "<span class="attribute">supportedServices</span>": <span class="value">[<span class="string">"cas"</span>]</span></div><div class="line">  	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这样写之后，你用<code>meteor --settings settings.json</code>来运行，打印你的<code>Meteor.settings</code>就能看见相关设置的信息了</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在Meteor的实际开发中，可能会针对不同的服务器做相关的设置，但如果每次都是改源代码会显得很麻烦，也容易出错，于是Meteor.settings就横空出世了</p>
<p>Meteor.settings的设置很简单</p>
<p>首先在更目录下新建一个<code>sett]]>
    </summary>
    
      <category term="Meteor" scheme="http://alonprince.github.io/tags/Meteor/"/>
    
      <category term="技术" scheme="http://alonprince.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Makefile的简单应用]]></title>
    <link href="http://alonprince.github.io/2014/10/03/Makefile/"/>
    <id>http://alonprince.github.io/2014/10/03/Makefile/</id>
    <published>2014-10-03T14:52:38.000Z</published>
    <updated>2014-10-06T05:23:04.000Z</updated>
    <content type="html"><![CDATA[<h1 id="需求分析">需求分析</h1>
<p>在编写nodejs的过程中，我们经常会遇到clone一个项目后，先要键入<code>npm install</code>来安装依赖，然后运行<code>gulp</code>(因为我觉得gulp的语法很简单，所以我只会gulp，还没研究过grunt)来生成相关编译后的静态文件，再使用<code>node app</code>来运行项目</p>
<p>这种情况如果只是一次还好，但由于nodejs在每次项目文件更改过之后，需要中断进程，然后重启进程，这个过程如果循环很多遍，相信很多人都会疯掉，虽然后类似<code>supervisor</code>之类的小工具能解决问题，<code>grunt</code>也有相应的插件能解决这个问题，例如文件改动，页面自动刷新等等，但是我这里提供了一种另外的解决方案</p>
<h1 id="Makefile简介">Makefile简介</h1>
<p>第一次看到<code>Makefile</code>是在别人的项目中，发现很好用，主要是能少打好多个字，看了下，发现里面内容也很简单</p>
<p>下面这个是我写的一个Makefile文件里面的内容</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">install</span> : <span class="keyword">all</span></span></div><div class="line"></div><div class="line"><span class="keyword">all</span> :</div><div class="line">	npm <span class="keyword">install</span></div><div class="line">	gulp scripts</div><div class="line">	node app</div></pre></td></tr></table></figure>

<p>用法很简单吧，你只需要把你要运行的命令写在all下面就好了</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="需求分析">需求分析</h1>
<p>在编写nodejs的过程中，我们经常会遇到clone一个项目后，先要键入<code>npm install</code>来安装依赖，然后运行<code>gulp</code>(因为我觉得gulp的语法很简单，所以我只会gulp]]>
    </summary>
    
      <category term="nodejs" scheme="http://alonprince.github.io/tags/nodejs/"/>
    
      <category term="npm" scheme="http://alonprince.github.io/tags/npm/"/>
    
      <category term="linux" scheme="http://alonprince.github.io/tags/linux/"/>
    
      <category term="技术" scheme="http://alonprince.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git命令小记]]></title>
    <link href="http://alonprince.github.io/2014/10/03/git%E5%91%BD%E4%BB%A4%E5%B0%8F%E8%AE%B0/"/>
    <id>http://alonprince.github.io/2014/10/03/git命令小记/</id>
    <published>2014-10-03T04:28:25.000Z</published>
    <updated>2014-10-06T05:22:58.000Z</updated>
    <content type="html"><![CDATA[<h3 id="简要说明">简要说明</h3>
<p>刚刚接触git，一直都不会用git，因为之前用的都是svn，目前正在学习nodejs，所以想把写的练习同步到github上，就查了下用法</p>
<h3 id="初始化">初始化</h3>
<p>git的初始化是</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git init</div></pre></td></tr></table></figure>

<p>这样系统就在当前目录生成了一个<code>.git</code>目录</p>
<p>首次使用<code>git</code>你可能还需要配置一下<code>git</code></p>
<p>你可以使用以下命令来配置你<code>git</code>的常用昵称和邮箱</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global <span class="literal">user</span>.name <span class="string">"Phishing"</span></div><div class="line">$ git config --global <span class="literal">user</span>.email <span class="string">"yourname@xxx.com"</span></div></pre></td></tr></table></figure>

<h3 id="添加文件">添加文件</h3>
<p>初始化以后，就需要开始添加你想要添加的文件进入git仓库了</p>
<p>你可以使用<code>git add</code>这个命令来添加<br>例如</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">add</span> *.js</div><div class="line">$ git <span class="built_in">add</span> *.html</div><div class="line">$ git <span class="built_in">add</span> package.json</div><div class="line">$ git <span class="built_in">add</span> README.md</div></pre></td></tr></table></figure>

<p>这样你就把以上文件加入到了git监控的目录里面了</p>
<p>当然在实际工作中，有些文件是不需要提交到git的</p>
<p>你可以在当前目录中新建一个<code>.gitignore</code>文件</p>
<p>在里面添加你不需要监控的文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">node_modules/           <span class="comment">//node的包，不需要传上去，文件夹后面加一个/，代表该文件夹被忽略</span></div><div class="line">/test					<span class="comment">//代表根目录下的test文件被忽略</span></div><div class="line">.DS_store 				<span class="comment">//代表.DS_store被忽略</span></div></pre></td></tr></table></figure>

<p>查看当前git的状态可以使用<code>git status</code></p>
<p>如果你没有添加上面的.gitignore的话，输入<code>git status</code>，git就会用红色高亮告诉你这几个文件是没有被加入git的监控中的，如果需要就使用<code>git add &lt;filename&gt;</code>来添加<br>加了.gitignore后，就不会再提示</p>
<h3 id="提交代码">提交代码</h3>
<p>文件添加成功后，就可以开始提交代码了</p>
<p>可以使用<code>git commit</code>来提交代码到git仓库中</p>
<p>如果之间键入<code>git commit</code>会提示你没有添加提交massage，你可以在弹出的文件中键入提交信息，然后退出编辑器，即自动提交</p>
<p>当然这样可能会有点麻烦，所以你可以利用<code>git commit -m &#39;your massage&#39;</code>来在命令行中直接写入提交的信息</p>
<p>输入完后，git就会告诉你你当前git仓库里面的状态了</p>
<p>刚刚开始接触git的时候，我每改动一个文件，然后用<code>git status</code>来查看过后发现，我需要再键入一遍<code>git add &lt;filename&gt;</code>才能提交，这让我感觉非常麻烦</p>
<p>后来我终于知道有个快捷方式了，就是<code>git commit -a -m &#39;your massage&#39;</code>，这样就能跳过<code>git add</code>这个步骤了，当然这样有好有坏，我就不细说了</p>
<h3 id="提交代码到远程仓库">提交代码到远程仓库</h3>
<p>提交代码到远程仓库时，你首先得新建一个<code>ssh key</code>，<a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external">具体方法在这里</a></p>
<p>弄好ssh key之后，就可以使用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git remote origin <span class="symbol">git:</span>/<span class="regexp">/your_github_address/your</span>_repositores_name.git</div></pre></td></tr></table></figure>

<p>来定义远程仓库的地址了</p>
<p>定义好之后就能使用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git push</div></pre></td></tr></table></figure>

<p>来提交代码到远程仓库了</p>
<p>如果你是第一次提交代码，系统会提示你使用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">push</span> --<span class="keyword">set</span>-upstream origin master</div></pre></td></tr></table></figure>

<p>来提交代码</p>
<p>以后你就可以修改代码然后使用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git commit -a -m <span class="string">'your massage'</span></div><div class="line"><span class="variable">$ </span>git push</div></pre></td></tr></table></figure>

<p>来提交你的代码了：）</p>
<h3 id="最后">最后</h3>
<p>以上就是我这刚刚接触git的小白了解到的一些git的基本操作了，如有错误，还请指出</p>
<p>谢谢观看【捂脸下台</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="简要说明">简要说明</h3>
<p>刚刚接触git，一直都不会用git，因为之前用的都是svn，目前正在学习nodejs，所以想把写的练习同步到github上，就查了下用法</p>
<h3 id="初始化">初始化</h3>
<p>git的初始化是</p>
<f]]>
    </summary>
    
      <category term="git" scheme="http://alonprince.github.io/tags/git/"/>
    
      <category term="技术" scheme="http://alonprince.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[npm网速慢的解决办法]]></title>
    <link href="http://alonprince.github.io/2014/09/28/npm%E7%BD%91%E9%80%9F%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://alonprince.github.io/2014/09/28/npm网速慢的解决办法/</id>
    <published>2014-09-28T15:22:31.000Z</published>
    <updated>2014-09-29T02:43:41.000Z</updated>
    <content type="html"><![CDATA[<p>国内经常会遇到npm特别慢的情况，可以通过下面的方式，更改npm的镜像</p>
<h3 id="通过下面命令设置镜像">通过下面命令设置镜像</h3>
<p><code>npm config set registry http://r.cnpmjs.org</code></p>
<p>国内镜像：</p>
<blockquote>
<p><a href="http://r.cnpmjs.org" target="_blank" rel="external">http://r.cnpmjs.org</a><br><a href="http://registry.cnpmjs.org" target="_blank" rel="external">http://registry.cnpmjs.org</a><br><a href="http://registry.npm.taobao.org" target="_blank" rel="external">http://registry.npm.taobao.org</a></p>
</blockquote>
<p>官方镜像：</p>
<blockquote>
<p><a href="https://registry.npmjs.org" target="_blank" rel="external">https://registry.npmjs.org</a></p>
</blockquote>
<h3 id="常用的npm的命令">常用的npm的命令</h3>
<p><code>npm install -g</code>全局安装包<br><code>npm ls -g</code>   查看全局已安装的包<br><code>npm install &lt;package&gt;@&lt;version&gt;</code>安装指定版本的包</p>
<h3 id="附上常用的库的地址">附上常用的库的地址</h3>
<p>JQuery地址</p>
<blockquote>
<p><a href="http://code.jquery.com/jquery-1.11.0.min.js" target="_blank" rel="external">http://code.jquery.com/jquery-1.11.0.min.js</a></p>
</blockquote>
<p>bootstrapev2地址</p>
<blockquote>
<p><a href="http://cdn.bootcss.com/twitter-bootstrap/2.3.2/css/bootstrap.min.css" target="_blank" rel="external">http://cdn.bootcss.com/twitter-bootstrap/2.3.2/css/bootstrap.min.css</a><br><a href="http://cdn.bootcss.com/twitter-bootstrap/2.3.2/js/bootstrap.min.js" target="_blank" rel="external">http://cdn.bootcss.com/twitter-bootstrap/2.3.2/js/bootstrap.min.js</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>国内经常会遇到npm特别慢的情况，可以通过下面的方式，更改npm的镜像</p>
<h3 id="通过下面命令设置镜像">通过下面命令设置镜像</h3>
<p><code>npm config set registry http://r.cnpmjs.org</code></]]>
    </summary>
    
      <category term="npm" scheme="http://alonprince.github.io/tags/npm/"/>
    
      <category term="nodejs" scheme="http://alonprince.github.io/tags/nodejs/"/>
    
      <category term="技术" scheme="http://alonprince.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
