<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[_Phishing]]></title>
  <subtitle><![CDATA[Phishing's blog]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://alonprince.github.io/"/>
  <updated>2014-10-03T15:08:28.536Z</updated>
  <id>http://alonprince.github.io/</id>
  
  <author>
    <name><![CDATA[Phishing]]></name>
    <email><![CDATA[alonprince@163.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Makefile的简单应用]]></title>
    <link href="http://alonprince.github.io/2014/10/03/Makefile/"/>
    <id>http://alonprince.github.io/2014/10/03/Makefile/</id>
    <published>2014-10-03T14:52:38.000Z</published>
    <updated>2014-10-03T15:08:03.000Z</updated>
    <content type="html"><![CDATA[<h1 id="需求分析">需求分析</h1>
<p>在编写nodejs的过程中，我们经常会遇到clone一个项目后，先要键入<code>npm install</code>来安装依赖，然后运行<code>gulp</code>(因为我觉得gulp的语法很简单，所以我只会gulp，还没研究过grunt)来生成相关编译后的静态文件，再使用<code>node app</code>来运行项目</p>
<p>这种情况如果只是一次还好，但由于nodejs在每次项目文件更改过之后，需要中断进程，然后重启进程，这个过程如果循环很多遍，相信很多人都会疯掉，虽然后类似<code>supervisor</code>之类的小工具能解决问题，<code>grunt</code>也有相应的插件能解决这个问题，例如文件改动，页面自动刷新等等，但是我这里提供了一种另外的解决方案</p>
<h1 id="Makefile简介">Makefile简介</h1>
<p>第一次看到<code>Makefile</code>是在别人的项目中，发现很好用，主要是能少打好多个字，看了下，发现里面内容也很简单</p>
<p>下面这个是我写的一个Makefile文件里面的内容</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="operator"><span class="keyword">install</span> : <span class="keyword">all</span></span></div><div class="line"></div><div class="line"><span class="keyword">all</span> :</div><div class="line">	npm <span class="keyword">install</span></div><div class="line">	gulp scripts</div><div class="line">	node app</div></pre></td></tr></table></figure>

<p>用法很简单吧，你只需要把你要运行的命令写在all下面就好了</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="需求分析">需求分析</h1>
<p>在编写nodejs的过程中，我们经常会遇到clone一个项目后，先要键入<code>npm install</code>来安装依赖，然后运行<code>gulp</code>(因为我觉得gulp的语法很简单，所以我只会gulp]]>
    </summary>
    
      <category term="nodejs" scheme="http://alonprince.github.io/tags/nodejs/"/>
    
      <category term="npm" scheme="http://alonprince.github.io/tags/npm/"/>
    
      <category term="linux" scheme="http://alonprince.github.io/tags/linux/"/>
    
      <category term="技术" scheme="http://alonprince.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git命令小记]]></title>
    <link href="http://alonprince.github.io/2014/10/03/git%E5%91%BD%E4%BB%A4%E5%B0%8F%E8%AE%B0/"/>
    <id>http://alonprince.github.io/2014/10/03/git命令小记/</id>
    <published>2014-10-03T04:28:25.000Z</published>
    <updated>2014-10-03T05:03:20.000Z</updated>
    <content type="html"><![CDATA[<h3 id="简要说明">简要说明</h3>
<p>刚刚接触git，一直都不会用git，因为之前用的都是svn，目前正在学习nodejs，所以想把写的练习同步到github上，就查了下用法</p>
<h3 id="初始化">初始化</h3>
<p>git的初始化是</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git init</div></pre></td></tr></table></figure>

<p>这样系统就在当前目录生成了一个<code>.git</code>目录</p>
<p>首次使用<code>git</code>你可能还需要配置一下<code>git</code></p>
<p>你可以使用以下命令来配置你<code>git</code>的常用昵称和邮箱</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global <span class="literal">user</span>.name <span class="string">"Phishing"</span></div><div class="line">$ git config --global <span class="literal">user</span>.email <span class="string">"yourname@xxx.com"</span></div></pre></td></tr></table></figure>

<h3 id="添加文件">添加文件</h3>
<p>初始化以后，就需要开始添加你想要添加的文件进入git仓库了</p>
<p>你可以使用<code>git add</code>这个命令来添加<br>例如</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">add</span> *.js</div><div class="line">$ git <span class="built_in">add</span> *.html</div><div class="line">$ git <span class="built_in">add</span> package.json</div><div class="line">$ git <span class="built_in">add</span> README.md</div></pre></td></tr></table></figure>

<p>这样你就把以上文件加入到了git监控的目录里面了</p>
<p>当然在实际工作中，有些文件是不需要提交到git的</p>
<p>你可以在当前目录中新建一个<code>.gitignore</code>文件</p>
<p>在里面添加你不需要监控的文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">node_modules/           <span class="comment">//node的包，不需要传上去，文件夹后面加一个/，代表该文件夹被忽略</span></div><div class="line">/test					<span class="comment">//代表根目录下的test文件被忽略</span></div><div class="line">.DS_store 				<span class="comment">//代表.DS_store被忽略</span></div></pre></td></tr></table></figure>

<p>查看当前git的状态可以使用<code>git status</code></p>
<p>如果你没有添加上面的.gitignore的话，输入<code>git status</code>，git就会用红色高亮告诉你这几个文件是没有被加入git的监控中的，如果需要就使用<code>git add &lt;filename&gt;</code>来添加<br>加了.gitignore后，就不会再提示</p>
<h3 id="提交代码">提交代码</h3>
<p>文件添加成功后，就可以开始提交代码了</p>
<p>可以使用<code>git commit</code>来提交代码到git仓库中</p>
<p>如果之间键入<code>git commit</code>会提示你没有添加提交massage，你可以在弹出的文件中键入提交信息，然后退出编辑器，即自动提交</p>
<p>当然这样可能会有点麻烦，所以你可以利用<code>git commit -m &#39;your massage&#39;</code>来在命令行中直接写入提交的信息</p>
<p>输入完后，git就会告诉你你当前git仓库里面的状态了</p>
<p>刚刚开始接触git的时候，我每改动一个文件，然后用<code>git status</code>来查看过后发现，我需要再键入一遍<code>git add &lt;filename&gt;</code>才能提交，这让我感觉非常麻烦</p>
<p>后来我终于知道有个快捷方式了，就是<code>git commit -a -m &#39;your massage&#39;</code>，这样就能跳过<code>git add</code>这个步骤了，当然这样有好有坏，我就不细说了</p>
<h3 id="提交代码到远程仓库">提交代码到远程仓库</h3>
<p>提交代码到远程仓库时，你首先得新建一个<code>ssh key</code>，<a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external">具体方法在这里</a></p>
<p>弄好ssh key之后，就可以使用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git remote origin <span class="symbol">git:</span>/<span class="regexp">/your_github_address/your</span>_repositores_name.git</div></pre></td></tr></table></figure>

<p>来定义远程仓库的地址了</p>
<p>定义好之后就能使用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git push</div></pre></td></tr></table></figure>

<p>来提交代码到远程仓库了</p>
<p>如果你是第一次提交代码，系统会提示你使用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">push</span> --<span class="keyword">set</span>-upstream origin master</div></pre></td></tr></table></figure>

<p>来提交代码</p>
<p>以后你就可以修改代码然后使用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git commit -a -m <span class="string">'your massage'</span></div><div class="line"><span class="variable">$ </span>git push</div></pre></td></tr></table></figure>

<p>来提交你的代码了：）</p>
<h3 id="最后">最后</h3>
<p>以上就是我这刚刚接触git的小白了解到的一些git的基本操作了，如有错误，还请指出</p>
<p>谢谢观看【捂脸下台</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="简要说明">简要说明</h3>
<p>刚刚接触git，一直都不会用git，因为之前用的都是svn，目前正在学习nodejs，所以想把写的练习同步到github上，就查了下用法</p>
<h3 id="初始化">初始化</h3>
<p>git的初始化是</p>
<f]]>
    </summary>
    
      <category term="git" scheme="http://alonprince.github.io/tags/git/"/>
    
      <category term="技术" scheme="http://alonprince.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[npm网速慢的解决办法]]></title>
    <link href="http://alonprince.github.io/2014/09/28/npm%E7%BD%91%E9%80%9F%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://alonprince.github.io/2014/09/28/npm网速慢的解决办法/</id>
    <published>2014-09-28T15:22:31.000Z</published>
    <updated>2014-09-29T02:43:41.000Z</updated>
    <content type="html"><![CDATA[<p>国内经常会遇到npm特别慢的情况，可以通过下面的方式，更改npm的镜像</p>
<h3 id="通过下面命令设置镜像">通过下面命令设置镜像</h3>
<p><code>npm config set registry http://r.cnpmjs.org</code></p>
<p>国内镜像：</p>
<blockquote>
<p><a href="http://r.cnpmjs.org" target="_blank" rel="external">http://r.cnpmjs.org</a><br><a href="http://registry.cnpmjs.org" target="_blank" rel="external">http://registry.cnpmjs.org</a><br><a href="http://registry.npm.taobao.org" target="_blank" rel="external">http://registry.npm.taobao.org</a></p>
</blockquote>
<p>官方镜像：</p>
<blockquote>
<p><a href="https://registry.npmjs.org" target="_blank" rel="external">https://registry.npmjs.org</a></p>
</blockquote>
<h3 id="常用的npm的命令">常用的npm的命令</h3>
<p><code>npm install -g</code>全局安装包<br><code>npm ls -g</code>   查看全局已安装的包<br><code>npm install &lt;package&gt;@&lt;version&gt;</code>安装指定版本的包</p>
<h3 id="附上常用的库的地址">附上常用的库的地址</h3>
<p>JQuery地址</p>
<blockquote>
<p><a href="http://code.jquery.com/jquery-1.11.0.min.js" target="_blank" rel="external">http://code.jquery.com/jquery-1.11.0.min.js</a></p>
</blockquote>
<p>bootstrapev2地址</p>
<blockquote>
<p><a href="http://cdn.bootcss.com/twitter-bootstrap/2.3.2/css/bootstrap.min.css" target="_blank" rel="external">http://cdn.bootcss.com/twitter-bootstrap/2.3.2/css/bootstrap.min.css</a><br><a href="http://cdn.bootcss.com/twitter-bootstrap/2.3.2/js/bootstrap.min.js" target="_blank" rel="external">http://cdn.bootcss.com/twitter-bootstrap/2.3.2/js/bootstrap.min.js</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>国内经常会遇到npm特别慢的情况，可以通过下面的方式，更改npm的镜像</p>
<h3 id="通过下面命令设置镜像">通过下面命令设置镜像</h3>
<p><code>npm config set registry http://r.cnpmjs.org</code></]]>
    </summary>
    
      <category term="npm" scheme="http://alonprince.github.io/tags/npm/"/>
    
      <category term="nodejs" scheme="http://alonprince.github.io/tags/nodejs/"/>
    
      <category term="技术" scheme="http://alonprince.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
